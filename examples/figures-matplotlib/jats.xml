<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with MathML3 v1.3 20210610//EN" "http://jats.nlm.nih.gov/publishing/1.3/JATS-archivearticle1-3-mathml3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ali="http://www.niso.org/schemas/ali/1.0/" dtd-version="1.3" xml:lang="en">
  <front>
    <article-meta>
      <title-group>
        <article-title>Plotting the coherence of two signals</article-title>
        <subtitle>Examples using matplotlib</subtitle>
      </title-group>
      <permissions>
        <license>
          <ali:license_ref>https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        </license>
      </permissions>
    </article-meta>
  </front>
  <body>
    <p>An example showing how to plot the coherence of two signals (
      <ext-link ext-link-type="uri" xlink:href="https://matplotlib.org/stable/gallery/lines_bars_and_markers/cohere.html">source</ext-link>).
    </p>
    <code language="python">import numpy as np
import matplotlib.pyplot as plt

# Fixing random state for reproducibility
np.random.seed(19680801)

dt = 0.01
t = np.arange(0, 30, dt)
nse1 = np.random.randn(len(t))                 # white noise 1
nse2 = np.random.randn(len(t))                 # white noise 2

# Two signals with a coherent part at 10 Hz and a random part
s1 = np.sin(2 * np.pi * 10 * t) + nse1
s2 = np.sin(2 * np.pi * 10 * t) + nse2

fig, axs = plt.subplots(2, 1)
axs[0].plot(t, s1, t, s2)
axs[0].set_xlim(0, 2)
axs[0].set_xlabel('Time')
axs[0].set_ylabel('s1 and s2')
axs[0].grid(True)

cxy, f = axs[1].cohere(s1, s2, 256, 1. / dt)
axs[1].set_ylabel('Coherence')

fig.tight_layout()
plt.show()</code>
    <graphic mimetype="image" mime-subtype="png" xlink:href="files/3fa4d70446cfad116a0b59824458540b.png"/>
  </body>
</article>